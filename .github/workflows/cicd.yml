name: Musuimsa CI/CD Pipeline

# 이 워크플로우를 언제 실행할지 정하는 조건입니다.
on:
  push:
    branches: [ "main", "develop" ] # 1. main 또는 develop 브랜치에 코드가 push 될 때
  pull_request:
    branches: [ "main", "develop" ] # 2. main 또는 develop 브랜치로 Pull Request가 생길 때

# 실제 실행될 작업들을 정의합니다.
jobs:
  # build 라는 이름의 작업을 정의합니다.
  build:
    # 이 작업은 ubuntu 최신 버전 환경에서 실행됩니다.
    runs-on: ubuntu-latest

    # 작업 안에서 실행될 단계들을 순서대로 나열합니다.
    steps:
      # 1단계: 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3 # GitHub에 올라온 우리 프로젝트 코드를 가져옵니다.

      # 2단계: JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3 # Java 21 버전을 설치합니다.
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3단계: gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # gradlew 파일에 실행 권한을 줍니다. (리눅스 환경이므로 필수)

      # 4단계: Gradle로 빌드 및 테스트 실행
      - name: Build with Gradle
        env:
          # dummy-for-ci
          JWT_SECRET_KEY: "dGhpcy1pcy1hLWR1bW15LWtleS1mb3ItY2ktYnVpbGQtb25seS1hbmQtbm90LXJlYWwK"
          MUSUIMSA_SHELTER_API_SERVICE_KEY: "dummy-key-for-ci"
        run: ./gradlew build # 프로젝트를 빌드합니다. 이 과정에서 테스트도 자동으로 함께 실행됩니다.

  deploy:
    # 'main' 브랜치에 코드가 push 될 때만 이 작업이 실행됩니다.
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 1. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 3. Docker 이미지 빌드 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          # 4단계에서 등록한 ECR URI 시크릿을 사용합니다.
          ECR_URI: ${{ secrets.AWS_ECR_URI }}
          IMAGE_TAG: latest # 이미지를 'latest' 태그로 푸시합니다.
        run: |
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG

      # 4. EC2에 SSH로 접속하여 배포 스크립트 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app
            # 불필요하게 용량을 차지하는 옛날 이미지들을 삭제합니다.
            sudo docker image prune -f
            sudo docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.AWS_ECR_URI }}
            sudo docker pull ${{ secrets.AWS_ECR_URI }}:latest
            sudo docker-compose up -d
